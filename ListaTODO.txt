# GRF - Framework de Componentes Grist - TODO

## Fase Final: Estilização e Refatoração

### Tarefas Concluídas

- [DONE] **Implementar funcionalidade de Salvar/Carregar Estilos de Card:**
  - Adicionado tipo de componente "Card Style" ao Gerenciador de Configurações.
  - Implementado editor simplificado (`config-card-style.js`) para estilos de card.
  - Botão "Copy Style" alterado para "Save Style as New Config" no editor de Card System.
  - Implementada lógica para salvar o estilo atual como uma nova configuração "Card Style" no `Grf_config`.
  - Implementada lógica para carregar um estilo de card salvo anteriormente através de um dropdown no editor de Card System.
  - Corrigido bug onde a alteração do `configId` de um widget no ConfigManager não era propagada corretamente.
  - Corrigido erro "tableId não definido" ao carregar configurações de "Card Style" no `CardViewer.js`.
  - Corrigido problema onde o prompt de nome do estilo não aparecia ou bloqueava a entrada.


- [DONE] **Melhorias no Gerenciador de Configurações:**
  - Ao abrir o gerenciador a partir de um widget, a configuração vinculada ao widget agora é pré-selecionada automaticamente.
  - Adicionada a capacidade de agrupar configurações logicamente, adicionando um nome de grupo entre colchetes (ex: `[Meu Grupo]`) na descrição da configuração.
  - Adicionado um indicador visual (uma "pílula" colorida) para mostrar o tipo de componente (Card System, Drawer, etc.) de cada configuração na lista.
  - Corrigido um bug que impedia a exibição dos nomes das configurações na lista.
  - Corrigido um erro de JavaScript causado por uma declaração de variável duplicada.

- [DONE] **Corrigir bugs no popup de configuração de campo:**
  - Adicionado fundo branco ao popup de estilo de campo para corrigir fundo transparente.
  - Corrigido erro de TypeError que impedia a abertura da configuração para campos do tipo RefList.

- [DONE] **Implementar configurações de exibição para campos RefList:**
  - A renderização de campos RefList agora respeita as configurações de "máximo de linhas" e "colunas visíveis" definidas no popup de estilo.

- [DONE] **Refatorar "Action Buttons" para serem Posicionáveis (Virtual Fields):**
  - Botões de ação agora são tratados como "campos virtuais" no editor de configuração.
  - Eles aparecem na lista de "Available Fields" e podem ser arrastados e posicionados no grid de layout.
  - A lógica de renderização no `CardSystem.js` foi alterada para desenhar os botões de acordo com sua posição no layout.
  - A lógica de estado no `config-cards.js` foi extensivamente modificada para suportar a criação, posicionamento, salvamento e exclusão dos botões como parte do layout.

- [DONE] **Testar a funcionalidade dos novos "Action Buttons" (configuração, renderização e execução das ações).**

- [DONE] **Resolver Inconsistência de UI na Configuração:**
  - Desabilitar os seletores de cor de "Label Style" and "Data Style" na configuração da "Top Bar" quando a opção "Também aplicar cor de texto do campo" está marcada.
  - Arquivo modificado: `ConfigManager/editors/config-cards.js`.

- [DONE] **Refatorar o `CardSystem` para usar o `grist-field-renderer` (Tarefa 3):**
  - O objetivo era unificar a formatação de dados (datas, números, etc.) e a aparência dos campos.
  - O `CardSystem.js` foi modificado para delegar a renderização de cada campo para a biblioteca `grist-field-renderer.js`.
  - Arquivo modificado: `libraries/grist-card-system/CardSystem.js`.

- [DONE] **Implementar "Action Buttons" no `CardSystem` (Ação Primária):**
  - **Passo 1: Expansão da Configuração (`config-cards.js`)**: Adicionada UI para configurar botões de ação secundária (ícone, tooltip, tipo de ação, configuração específica).
  - **Passo 2: Implementação da Renderização (`CardSystem.js`)**: Botões de ação são renderizados nos cards e publicam eventos `grf-navigation-action-triggered` ao serem clicados.
  - **Passo 3: O Orquestrador (`CardViewer.js`) se Torna Mais Inteligente**: `CardViewer.js` escuta eventos de navegação e executa as ações configuradas (navegar para página Grist, abrir URL, atualizar registro).

- [DONE] **Implementar Fundo de Campo Customizável:**
  - Adicionado opções na aba "Styling" para habilitar um fundo para os campos.
  - A cor do fundo deve ser uma versão mais clara (15%, 30%, 50%) da cor de fundo do card.
  - A caixa de fundo deve envolver o rótulo e o valor do campo.

- [DONE] **Corrigir Lógica de Configuração do Drawer:**
  - A configuração do Drawer agora salva o `tableId` para o qual foi criada.
  - O Gerenciador de Configurações agora pré-seleciona a tabela correta ao editar uma configuração de Drawer, tornando o processo mais intuitivo.

- [DONE] **Implementar "Group Boxes" no Layout:**
  - Adicionada a capacidade de criar, posicionar, redimensionar e estilizar caixas de grupo no layout dos cards para organização visual.

- [DONE] **RefList: Paginação nos Cards:**
  - Adicionada uma opção de configuração para que tabelas de RefList com muitas linhas possam ser paginadas diretamente na interface do card.

- [DONE] **RefList: Colapsar/Expandir nos Cards:**
  - Permitir que uma tabela de RefList renderizada em um card possa ser "colapsada" para ocupar menos espaço e "expandida" pelo usuário para ver todos os dados.

- [DONE] **RefList: Expansão Vertical no Layout:**
  - Em vez de um handle de arrastar, a expansão vertical agora é controlada por uma opção "Card Rows" no popup de estilo do campo.
  - A lógica de `rowSpan` foi implementada no `CardSystem.js` e no editor de layout `config-cards.js`.

- [DONE] **RefList: Estilo "Tabela Zebrada":**
  - Adicionada opção "Tabela Zebrada" na configuração de RefList para o Card System.
  - Corrigido o bug no Drawer onde o estilo zebrado não era visível, ajustando a cor de fundo para ser mais proeminente.
  - A lógica de renderização foi unificada em `render-reflist.js` para suportar a opção em ambos os componentes (Card e Drawer).

- [DONE] **Correção de Bug Crítico no Editor do Drawer:**
  - Resolvido um bug de regressão onde salvar uma configuração de Drawer resultava em uma configuração vazia, fazendo com que o conteúdo do drawer não fosse exibido.
  - O erro foi causado por uma sintaxe incorreta no arquivo `config-drawer.js` após uma refatoração.

- [DONE] **Melhorias nos Ícones de Ação:**
  - Implementada a funcionalidade de "Grupos de Ícones", permitindo agrupar múltiplos botões de ação.
  - Adicionada configuração de alinhamento (esquerda, centro, direita) para os grupos de ícones dentro do card.
  - Adicionada opção para redimensionar o tamanho dos ícones globalmente.
  - A interface de configuração foi refatorada para gerenciar grupos em vez de botões individuais.

- [DONE] **Melhorias de UX e Estilo (Card System):**
  - Adicionada opção de "Internal Card Padding" para controlar o espaçamento interno dos cards.
  - Implementado tooltip em campos com altura limitada para exibir o texto completo.
  - Adicionadas opções de estilo para caixas de campo (borda, fundo, efeito) e labels (negrito, cor, fonte).
  - Corrigido bug que impedia a renderização de quebras de linha em campos de texto.
  - Corrigidos múltiplos bugs na inicialização da UI de configuração que impedia a persistência de estados.
  - Melhoradas as mensagens de erro na inicialização do widget para guiar o usuário na configuração da tabela `Grf_config`.

### Próximas Tarefas

- [DONE] **Filter module not updating correctly:** When using the filter bar, deleting characters or changing the search term after an initial filter does not correctly update the displayed cards. The filter seems to be applied to an already filtered set of records, instead of always filtering the original, complete dataset.

- [DONE] **Melhorar Efeitos de Caixa de Campo e Adicionar Tooltips de Ajuda:**
  - Os efeitos de "Bevel" e "Drop Shadow" foram tornados mais pronunciados para melhor visibilidade.
  - Adicionado um novo efeito "Bevel (Outset)" para criar uma aparência de relevo.
  - Implementado tooltips de ajuda (?) nos labels dos campos, que exibem a descrição do campo (do Grist) ao passar o mouse.
  - Corrigido um conflito entre o novo tooltip de ajuda e o tooltip de conteúdo de campo truncado.

- [DONE] **`grf-trigger-widget` event not firing correctly:** The `CardSystem.js` is not publishing the `grf-trigger-widget` event as intended, even though the code logic appears correct. This is likely due to a caching issue or the browser loading an older version of the script. Need to ensure the latest `CardSystem.js` is loaded and its `actionButton.addEventListener` is correctly publishing `grf-trigger-widget` when `actionType` is `triggerWidget`.

- [DONE] **Filter not applied in "Riscos" widget:** Even when the `grf-trigger-widget` event is eventually fired, the "Riscos" widget is not filtering the records correctly based on the `externalFilter`. This needs further investigation into the filtering logic in `riscos/js/main.js`, specifically how `externalFilter` is being used to filter `allRiskRecords`.

- [ENHANCEMENT] **Tooltip for action buttons:** The tooltip for action buttons should display the number of related records, not just the action name. This will require fetching the count of related records for the specific `sourceRecord` and `targetTable` and updating the tooltip dynamically. This can be addressed after the core `triggerWidget` functionality and filtering are resolved.

### Progresso Atual no Table Widget

- [DONE] **`configId` do Table Widget persiste após navegação:**
  - **Problema:** O `configId` para o Table Widget não estava persistindo após a navegação, recarregando como `null`.
  - **Resolução:** Modificado `table-widget/script.js` para explicitamente recuperar o `configId` usando `grist.getOptions()` no início do `DOMContentLoaded`, garantindo a inicialização correta.

- [DONE] **Resolvido erro 404 para `tabulator.min.js` e `tabulator.min.css`:** Arquivos adicionados manualmente à `libraries/tabulator`.
- [DONE] **Corrigidos caminhos de importação em `table-widget/script.js`:** De absolutos para relativos.
- [DONE] **Corrigido caminho de `framework-config.js` em `table-widget/index.html`:** De absoluto para relativo.
- [DONE] **Ícone de engrenagem e popover de configuração estilizados corretamente no Table Widget.**
- [DONE] **Modal do Gerenciador de Configurações formatado corretamente no Table Widget.**
- [DONE] **`ConfigManagerComponent.js` atualizado para gerar opções "Novo" dinamicamente e incluir "Table" como tipo de componente.**
- [DONE] **`table-widget/script.js` passa `componentTypes: ['Table']` ao abrir o `ConfigManagerComponent`.**
- [DONE] **Todos os scripts de editor (`config-cards.js`, `config-drawer.js`, `config-card-style.js`, `config-table.js`) convertidos para módulos e importados diretamente em `ConfigManagerComponent.js`.**
- [DONE] **Tags de script do editor removidas de `table-widget/index.html` e `widgets/CardViewer.html`.**
- [DONE] **Criado `config-table.js` placeholder.**

### Erro Atual

- [BUG] **`ReferenceError: componentTypes is not defined` no `ConfigManagerComponent.js`:** Ocorre em `renderMainUI` (linha 77:29) porque a função `open` não está passando o parâmetro `componentTypes` para `renderMainUI` corretamente. Isso impede a correta inicialização do Gerenciador de Configurações e a exibição das opções de tipo de componente.

### Table Configurator UI Improvements

- [DONE] **`configId` do Table Widget persiste após navegação:**
  - **Problema:** O `configId` para o Table Widget não estava persistindo após a navegação, recarregando como `null`.
  - **Resolução:** Modificado `table-widget/script.js` para explicitamente recuperar o `configId` usando `grist.getOptions()` no início do `DOMContentLoaded`, garantindo a inicialização correta.

- [DONE] **Botões "Selecionar Todos" e "Desmarcar Todos" causavam submissão inesperada do formulário e perda de dados:**
  - **Problema:** Clicar nos botões "Selecionar Todos" ou "Desmarcar Todos" no Table Configurator causava a submissão do formulário, fechando o configurador e potencialmente salvando uma configuração incompleta.
  - **Resolução:** Adicionado `type="button"` aos botões em `ConfigManager/editors/config-table.js` para evitar submissão de formulário indesejada.

- [DONE] **Botões "Selecionar Todos" e "Desmarcar Todos" não atualizavam corretamente as caixas de seleção na UI:**
  - **Problema:** Após clicar em "Selecionar Todos" ou "Desmarcar Todos", as caixas de seleção no configurador não eram atualizadas visualmente, e o array `_config.visibleColumns` não refletia corretamente o estado desejado.
  - **Resolução:** Modificado `ConfigManager/editors/config-table.js` para atualizar diretamente a propriedade `checked` de todas as caixas de seleção relevantes e, em seguida, despachar um evento `change` manual em cada uma.

- [DONE] **Campos do configurador da tabela não eram exibidos inicialmente:**
  - **Problema:** Ao abrir o Table Configurator, nenhum campo era exibido.
  - **Resolução:** Lógica de `currentVisibleColumns` em `ConfigManager/editors/config-table.js` ajustada para exibir todas as `availableColumns` por padrão, se `_config.visibleColumns` estivesse vazio ou indefinido.

- [DONE] **JSON da configuração não era visível na área de texto de depuração:**
  - **Problema:** O JSON da configuração não era exibido na área de texto "JSON Gerado (Monitor de Debug)" para o Table Configurator.
  - **Resolução:** Removidos logs de depuração de `ConfigManager/config-manager-widget.js`. Modificada `ConfigManager/editors/config-table.js` para incluir uma seção `<details>` com `<code>` para exibir o JSON gerado dinamicamente, e implementada a função `updateDebugJson()` para popular esta seção.

### Progresso da Implementação Recente (Table Widget)

- [DONE] **Configurador de Tabela Inicial:**
  - Criada UI básica do configurador de tabela em `config-table.js`.
  - Registrado o configurador de tabela com `table-manifest.js` e `ConfigManagerComponent.js`.
- [DONE] **Visibilidade e Ordem das Colunas:**
  - Usuários podem reordenar colunas e marcá-las como visíveis/ocultas.
  - Botões "Selecionar Todas" / "Deselecionar Todas" implementados.
- [DONE] **Tabela Zebrada (Estilização):**
  - Opção de configuração adicionada.
- [DONE] **Habilitar Cálculos de Coluna (Global):**
  - Alternância global implementada.
- [DONE] **Cálculo de Coluna (por coluna):**
  - Dropdown para selecionar soma, média, mínimo, máximo, contagem.
- [DONE] **Modo de Edição (Excel vs. Drawer):**
  - Botões de rádio para Estilo Excel (Edição Inline) e Estilo Drawer (Edição por Formulário).
- [DONE] **Travado (por coluna):**
  - Checkbox para tornar a coluna não editável.
- [DONE] **Obrigatório (por coluna):**
  - Checkbox para tornar a coluna obrigatória (apenas Estilo Excel).
- [DONE] **Botão 'Adicionar Novo':**
  - Botão implementado para adicionar novos registros.
  - Corrigido bug de `grist.docApi.addRecords is not a function` usando `grist.docApi.applyUserActions`.
- [DONE] **Formatação de Células (por coluna):**
  - Dropdown para formatadores embutidos do Tabulator (Moeda, Link, Data/Hora, Tick/Cruz, Imagem, Progresso) com `formatterParams` dinâmicos.
- [DONE] **Grist Styling Overrides (por coluna):**
  - Checkboxes para `ignoreConditionalFormatting`, `ignoreHeaderStyle`, `ignoreCellStyle` como flags para implementação futura.
- [FIXED] **Bug no carregamento da configuração:** Resolvido `TypeError: Cannot read properties of undefined (reading 'enabled')` ao acessar `currentConfig.pagination` e `currentConfig.defaultSort` com encadeamento opcional.

- [DONE] **Drawer Não Abre ao Clicar na Linha:**
  - **Problema:** O drawer não abria ao clicar em uma linha da tabela, mesmo com a configuração de `editMode` como 'drawer'. Os eventos `cellClick` e `rowClick` do Tabulator não estavam sendo disparados de forma confiável.
  - **Resolução:** Removido o manipulador de eventos do Tabulator (`rowClick`). Implementado um ouvinte de evento de clique nativo no contêiner da tabela (`tableContainer`). Este ouvinte usa delegação de eventos para detectar cliques em elementos de linha (`.tabulator-row`), obtém os dados da linha correspondente usando a API do Tabulator (`tabulatorTable.getRow()`) e, em seguida, chama a função `openDrawer` manualmente. Esta abordagem contorna o sistema de eventos interno do Tabulator, garantindo que os cliques sejam capturados e tratados de forma robusta.

### Bugs Atuais / Funcionalidades Pendentes (Table Widget)

- [BUG] **Tabela Zebrada Lógica Invertida:** Ativar "Tabela Zebrada" desativa as listras; desativá-la as ativa. (Re-reportado pelo usuário).
- [BUG] **"Modo de Edição" Falta "Estilo Excel":** O botão de rádio para "Estilo Excel" está faltando na interface do usuário.
- [PENDING] **"ID do Drawer" como Dropdown:** Usuário solicitou que este seja um menu suspenso das configurações de Drawer disponíveis.
- [HIGH PRIORITY] **Formatação de Células Grist na Tabela:** A tabela *não* está mostrando a formatação de célula específica do Grist (por exemplo, cápsulas coloridas para campos Choice).

### Funcionalidades Ainda Não Implementadas (da "Instructions for TABULATOR options.txt")

- **RefList / Exibição de Tabela Aninhada**
- **Coluna Virtual "Ações"**
- **Detalhes de Implementação CRUD (Atualizar/Excluir para Estilo Excel, Visualizar/Editar/Excluir para Estilo Drawer)**
