# GRF - Framework de Componentes Grist - TODO

## Fase Final: Estilização e Refatoração

### Tarefas Concluídas

- [DONE] **Corrigir bugs no popup de configuração de campo:**
  - Adicionado fundo branco ao popup de estilo de campo para corrigir fundo transparente.
  - Corrigido erro de TypeError que impedia a abertura da configuração para campos do tipo RefList.

- [DONE] **Implementar configurações de exibição para campos RefList:**
  - A renderização de campos RefList agora respeita as configurações de "máximo de linhas" e "colunas visíveis" definidas no popup de estilo.

- [DONE] **Refatorar "Action Buttons" para serem Posicionáveis (Virtual Fields):**
  - Botões de ação agora são tratados como "campos virtuais" no editor de configuração.
  - Eles aparecem na lista de "Available Fields" e podem ser arrastados e posicionados no grid de layout.
  - A lógica de renderização no `CardSystem.js` foi alterada para desenhar os botões de acordo com sua posição no layout.
  - A lógica de estado no `config-cards.js` foi extensivamente modificada para suportar a criação, posicionamento, salvamento e exclusão dos botões como parte do layout.

- [DONE] **Testar a funcionalidade dos novos "Action Buttons" (configuração, renderização e execução das ações).**

- [DONE] **Resolver Inconsistência de UI na Configuração:**
  - Desabilitar os seletores de cor de "Label Style" and "Data Style" na configuração da "Top Bar" quando a opção "Também aplicar cor de texto do campo" está marcada.
  - Arquivo modificado: `ConfigManager/editors/config-cards.js`.

- [DONE] **Refatorar o `CardSystem` para usar o `grist-field-renderer` (Tarefa 3):**
  - O objetivo era unificar a formatação de dados (datas, números, etc.) e a aparência dos campos.
  - O `CardSystem.js` foi modificado para delegar a renderização de cada campo para a biblioteca `grist-field-renderer.js`.
  - Arquivo modificado: `libraries/grist-card-system/CardSystem.js`.

- [DONE] **Implementar "Action Buttons" no `CardSystem` (Ação Primária):**
  - **Passo 1: Expansão da Configuração (`config-cards.js`)**: Adicionada UI para configurar botões de ação secundária (ícone, tooltip, tipo de ação, configuração específica).
  - **Passo 2: Implementação da Renderização (`CardSystem.js`)**: Botões de ação são renderizados nos cards e publicam eventos `grf-navigation-action-triggered` ao serem clicados.
  - **Passo 3: O Orquestrador (`CardViewer.js`) se Torna Mais Inteligente**: `CardViewer.js` escuta eventos de navegação e executa as ações configuradas (navegar para página Grist, abrir URL, atualizar registro).

- [DONE] **Implementar Fundo de Campo Customizável:**
  - Adicionado opções na aba "Styling" para habilitar um fundo para os campos.
  - A cor do fundo deve ser uma versão mais clara (15%, 30%, 50%) da cor de fundo do card.
  - A caixa de fundo deve envolver o rótulo e o valor do campo.

- [DONE] **Corrigir Lógica de Configuração do Drawer:**
  - A configuração do Drawer agora salva o `tableId` para o qual foi criada.
  - O Gerenciador de Configurações agora pré-seleciona a tabela correta ao editar uma configuração de Drawer, tornando o processo mais intuitivo.

### Próximas Tarefas

- [ ] **Implementar "Group Boxes" no Layout:**
  - **Plano de Implementação:**
    - **Parte 1: `config-cards.js` (UI de Configuração)**
      - [ ] Adicionar `groupBoxes: []` ao `DEFAULT_STYLING`.
      - [ ] Em `buildFieldsLayoutTab`, adicionar o HTML para o grid das group boxes (`#cs-group-box-grid`), a lista de disponíveis (`#cs-group-box-list`) e o botão de adicionar (`#cs-add-group-box-btn`), garantindo a ordem correta dos elementos.
      - [ ] Implementar a lógica do botão de adicionar para criar um novo objeto `groupBox` no array `state.styling.groupBoxes`.
      - [ ] Criar a função `buildAvailableGroupBoxesList` para renderizar as caixas na lista de disponíveis.
      - [ ] Implementar a funcionalidade de arrastar e soltar (drag-and-drop) da lista de disponíveis para o grid das group boxes.
      - [ ] Implementar a lógica de redimensionamento das caixas no grid.
      - [ ] Criar um popup de configuração para permitir a alteração do nome (`name`) e da cor de fundo (`backgroundColor`) de uma group box.
      - [ ] Em `readStylingTab`, garantir que o array `groupBoxes` seja salvo na configuração final.
    - **Parte 2: `CardSystem.js` (Renderização)**
      - [ ] Em `renderCards`, fazer um loop por `styling.groupBoxes` e renderizar os elementos `div` correspondentes no fundo do card.
      - [ ] Implementar a lógica para que a caixa se expanda verticalmente para conter todos os campos que estão dentro de sua área de layout.
      - [ ] No editor, marcar visualmente (ex: fundo cinza) as células do grid de campos que estão "atrás" de uma group box.

- [ ] **RefList: Paginação nos Cards:**
  - Adicionar uma opção de configuração para que tabelas de RefList com muitas linhas possam ser paginadas diretamente na interface do card, em vez de mostrar uma lista longa ou truncada.

- [ ] **RefList: Colapsar/Expandir nos Cards:**
  - Permitir que uma tabela de RefList renderizada em um card possa ser "colapsada" para ocupar menos espaço e "expandida" pelo usuário para ver todos os dados.

- [ ] **RefList: Expansão Vertical no Layout:**
  - Possibilitar que um campo de RefList no grid de layout possa ser expandido verticalmente (aumentar seu `rowSpan`) para acomodar mais linhas da tabela, permitindo layouts mais flexíveis onde outros campos podem ocupar o espaço ao lado.